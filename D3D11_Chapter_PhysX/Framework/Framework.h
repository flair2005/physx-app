#pragma once

#include "..\Render\Window.h"
#include "..\Render\Render.h"
#include "..\Util\Log.h"
#include "..\Input\InputMgr.h"
#include "..\Input\InputListener.h"
#include "Stepper.h"
#include "..\Physics\Physics.h"
#include "..\Physics\Scene.h"
#include "..\Util\Fps.h"
#include "..\Util\Text\TextManager.h"

/*
	Основной класс, отвечающий за действия всех остальных классов. В нем содержатся экземпляры всех основных классов.
	Именно его экземпляр должен создать пользователь первым, затем (в будущем пофиксю) - экземпляр Render,
	который отправляется экземпляру Framework через метод setRender(Render* render).
	После этого пользователь последовательно вызывает методы init(), run() и Close().
	1) init() инициализирует все его компоненты; в случае успеха ставится флаг is_init = true и можно вызывать метод run()
	2) run() - здесь происходит вся работа приложения. Симулируем, выводим текст, рисуем - повторить до бесконечности, либо
	пока не поступит сигнал о выходе от Window через метод bool Window::isExit() - true означает поступление сигнала.
	3) Получив сигнал о выходе, метод run() прекращает свою работу (выходит из цикла). Пользователь должен обеспечить
	вызов метода Close() после run(), чтобы программа корректно завершила работу.
*/

class Framework {
protected:
	bool m_frame(float dt);		//Вызываем на каждой итерации приложения, оттуда уже симулируем, рисуем и т.д.
								//dt - время, пройденное с предыдущей итерации
	Window* m_wnd;				//Отвечает за работу окна в операционной системе; принимает сообщения от Windows
	Render* m_render;			//Все, что касается вывода изображения на экран. Работает с DirectX11
	InputMgr* m_input;			//Отвечает за обработку пользовательского ввода; связан с Window
	Log* m_log;					//Логирование работы приложения; доступен из любой части кода через Log::get()
	Stepper* m_stepper;			//Осуществляет симуляцию. Промежуточное звено между фреймворком и физикой
	Physics* m_physics;			//Основной класс, позволяющий работать с PhysX. Создает интерфейсы и объекты PhysX.
	Scene* m_scene;				//Описывает происходящее с точки зрения физических процессов.
	TextManager* m_textManager;	//Вся работа с текстом лежит на этом классе. Создает шрифты, тексты и рендерит их.
	Fps* m_fps;					//Вспомогательный класс; считает количество кадров в секунду и отдает их ТекстМенеджеру на отрисовку

	bool m_init;
	bool m_isRunning;			//true во время работы; false - если поступает сигнал о выходе -> приложение закрывается

	float startTime;			//Время, пройденное с момента запуска приложения
public:
	Framework();
	~Framework();

	bool init();
	void run();
	void Close();

	void preRender(float dt);
	void postRender(float dt);
	
	void setRender(Render* render) { m_render = render; }
	void addInputListener(InputListener* listener);
};
