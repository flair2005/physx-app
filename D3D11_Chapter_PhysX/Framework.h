#pragma once

#include "Window.h"
#include "Render.h"
#include "Log.h"
#include "InputMgr.h"
#include "InputListener.h"
#include "CameraInputListener.h"
#include "Stepper.h"
#include "Physics.h"
#include "Scene.h"
#include "Fps.h"
#include "TextManager.h"
#include "ObjectManager.h"
#include "Terrain.h"
#include "Timer.h"
#include "Input.h"

/*
	Основной класс, отвечающий за действия всех остальных классов. В нем содержатся экземпляры всех основных классов.
	Именно его экземпляр должен создать пользователь первым, затем (в будущем пофиксю) - экземпляр Render,
	который отправляется экземпляру Framework через метод setRender(Render* render).
	После этого пользователь последовательно вызывает методы init(), run() и Close().
	1) init() инициализирует все его компоненты; в случае успеха ставится флаг is_init = true и можно вызывать метод run()
	2) run() - здесь происходит вся работа приложения. Симулируем, выводим текст, рисуем - повторить до бесконечности, либо
	пока не поступит сигнал о выходе от Window через метод bool Window::isExit() - true означает поступление сигнала.
	3) Получив сигнал о выходе, метод run() прекращает свою работу (выходит из цикла). Пользователь должен обеспечить
	вызов метода Close() после run(), чтобы программа корректно завершила работу.
*/

class Framework {
protected:
	bool m_frame(double dt);	//Вызываем на каждой итерации приложения, оттуда уже симулируем, рисуем и т.д.
								//dt - время, пройденное с предыдущей итерации
	Window* m_wnd;				//Отвечает за работу окна в операционной системе; принимает сообщения от Windows
	Render* m_render;			//Все, что касается вывода изображения на экран. Работает с DirectX11
	InputMgr* m_input;			//Отвечает за обработку пользовательского ввода; связан с Window
	Log* m_log;					//Логирование работы приложения; доступен из любой части кода через Log::get()
	Stepper* m_stepper;			//Осуществляет симуляцию. Промежуточное звено между фреймворком и физикой
	Physics* m_physics;			//Основной класс, позволяющий работать с PhysX. Создает интерфейсы и объекты PhysX.
	Scene* m_scene;				//Описывает происходящее с точки зрения физических процессов.
	TextManager* m_textManager;	//Вся работа с текстом лежит на этом классе. Создает шрифты, тексты и рендерит их.
	Fps* m_fps;					//Вспомогательный класс; считает количество кадров в секунду и отдает их ТекстМенеджеру на отрисовку
	ObjectManager* m_objectManager;	//Управляет всеми объектами; в объекты включены данные о вершинах и индексах, а также 
									//представление объекта (PxRigidBody) для физикса
	Input* m_newInput;			//TODO REFACTOR

	bool m_init;
	bool m_isRunning;			//true во время работы; false - если поступает сигнал о выходе -> приложение закрывается
public:
	Framework();
	~Framework();

	bool init();
	void run();
	void Close();

	void preRender(double dt);
	void postRender(double dt);
	
	void setRender(Render* render) { m_render = render; }
	void addInputListener(InputListener* listener);
};
